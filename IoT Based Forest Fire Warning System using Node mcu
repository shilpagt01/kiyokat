#include <ESP8266WiFi.h>
#include <OneWire.h>
#include <PubSubClient.h>
#include "DHT.h"
#define DHTPIN 0  //Not D0 Pin it is D3 Pin, Here 0 means GPIO 0.
#define DHTTYPE  DHT11

const char* ssid = "OPPO A5 2020";  // replace subscribe with your WiFi SSID(Name)
const char* password = "0825shilpa";  //replace with Your Wifi Password name
const char* host = "api.thingspeak.com";
const char* writeAPIKey = "TVR5HYHEXGWYGXQV";

int TRIGGER = 5;  //Pin D1 = TRIGGER
int ECHO = 4;  //Pin D2 = ECHO
DHT dht(DHTPIN, DHTTYPE, 15);

void setup() {
  Serial.begin(115200);  //Recommended speed is 115200
  pinMode(TRIGGER,OUTPUT);
  pinMode(ECHO,INPUT);
  dht.begin();
  delay(1000);
  Serial.println("Connecting to ");
  Serial.println(ssid);
  
//Connect to WiFi network

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  }

   void loop() {
  // establish variables for duration of the ping, and the distance result in inches and centimeters:
  
  long duration, inches, cm;
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  double Moisture = 100-((analogRead(A0)/1023.0)*100);


  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
 
  digitalWrite(TRIGGER, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.

  duration = pulseIn(ECHO, HIGH);

  // convert the time into a distance
  
  cm = microsecondsToCentimeters(duration);

  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
  delay(100);

  if (isnan(humidity) || isnan(temperature)) {
    return;
  }

  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    return;
  }

  String url = "/update?key=";
  url+=writeAPIKey;
  url+="&field1=";
  url+=String(temperature);
  url+="&field2=";
  url+=String(humidity);
  /*url+="&field3=";
  url+=String(temp);*/
  url+="&field3=";
  url+=String(Moisture);
  url+="&field4=";
  url+=String(cm);
  url+="\r\n";
  
  // Request to the server
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  Serial.print("Temperature:");
  Serial.print(temperature);
  Serial.print("\n");
  Serial.print("Humidity:");
  Serial.println(humidity);
  Serial.print("Moisture:");
  Serial.println(Moisture);             
  Serial.print("Distance:");
  Serial.print(cm);
  Serial.print("\n");
 
  Serial.println("Send to ThingSpeak.\n");
  client.stop();
  Serial.println("Wait for 15 sec to update next datapack in thingSpeak");
    delay(1000);
  
 }

 long microsecondsToCentimeters(long microseconds) {
   return microseconds / 29 / 2;
 }
